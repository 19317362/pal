import unittest
import sys
sys.path.append('../')
from opsmgr import OpsMgr
from opsmgrbuildinfo import OpsMgrBuildInformation
from platforminformation import PlatformInformation
from cStringIO import StringIO
from scriptgenerator import Script
import testutils
import filegenerator

class OpsMgrTestCase(unittest.TestCase):
    def GivenAPlatform(self, os, distribution = '', majorversion = 5, minorversion = 3):
        platform = PlatformInformation()
        platform.OS = os
        platform.Distribution = distribution
        platform.Architecture = ''
        platform.MajorVersion = majorversion
        platform.MinorVersion = minorversion
        return platform

    def GivenAProduct(self, platform):
        return OpsMgr('1.2.3', '4', platform, OpsMgrBuildInformation('', platform, '', False))

    def VerifyScriptContent(self, expectedContent, script):
        output = StringIO()
        script.WriteTo(output)
        self.assertEqual(expectedContent, output.getvalue())

    def VerifyPreInstallScriptContent(self, expectedContent, os, distribution = '', majorversion = 5, minorversion = 3):
        platform = self.GivenAPlatform(os, distribution, majorversion, minorversion)
        product = self.GivenAProduct(platform)
        script = Script(platform)
        product.WritePreInstallToScript(script)
        self.VerifyScriptContent(expectedContent, script)

    def VerifyPostInstallScriptContent(self, expectedContent, os, distribution = '', majorversion = 5, minorversion = 3):
        platform = self.GivenAPlatform(os, distribution, majorversion, minorversion)
        product = self.GivenAProduct(platform)
        script = Script(platform)
        product.WritePostInstallToScript(script)
        self.VerifyScriptContent(expectedContent, script)

    def VerifyPreUpgradeScriptContent(self, expectedContent, os, distribution = '', majorversion = 5, minorversion = 3):
        platform = self.GivenAPlatform(os, distribution, majorversion, minorversion)
        product = self.GivenAProduct(platform)
        script = Script(platform)
        product.WritePreUpgradeToScript(script)
        self.VerifyScriptContent(expectedContent, script)
    
    def VerifyPreRemoveScriptContent(self, expectedContent, os, distribution = '', majorversion = 5, minorversion = 3):
        platform = self.GivenAPlatform(os, distribution, majorversion, minorversion)
        product = self.GivenAProduct(platform)
        script = Script(platform)
        product.WritePreRemoveToScript(script)
        self.VerifyScriptContent(expectedContent, script)
    
    def VerifyPostRemoveScriptContent(self, expectedContent, os, distribution = '', majorversion = 5, minorversion = 3):
        platform = self.GivenAPlatform(os, distribution, majorversion, minorversion)
        product = self.GivenAProduct(platform)
        script = Script(platform)
        product.WritePostRemoveToScript(script)
        self.VerifyScriptContent(expectedContent, script)
    
    def testAIX_PreInstallScriptHasCorrectContent(self):
        self.VerifyPreInstallScriptContent(
            '#!/bin/sh\n\ncheck_additional_deps() {\n  return 0\n}\n\n\n#\n# Main section\n#\ncheck_additional_deps \n',
            'AIX')

    def testHPUX_PreInstallScriptHasCorrectContent(self):
        self.VerifyPreInstallScriptContent(
            '#!/usr/bin/sh\n\n\n#\n# Main section\n#\n',
            'HPUX')

    def testSunOS_PreInstallScriptHasCorrectContent(self):
        self.VerifyPreInstallScriptContent(
            '#!/usr/bin/sh\n\ncheck_additional_deps() {\n  return 0\n}\n\n\n#\n# Main section\n#\ncheck_additional_deps \n',
            'SunOS')

    def testSuSE_PreInstallScriptHasCorrectContent(self):
        self.VerifyPreInstallScriptContent(
            '#!/bin/sh\n\n\n#\n# Main section\n#\n',
            'Linux', 'SUSE', 10, 2)

    def testUbuntu_PreInstallScriptHasCorrectContent(self):
        self.VerifyPreInstallScriptContent(
            '#!/bin/sh\n\n\n#\n# Main section\n#\n',
            'Linux', 'UBUNTU')

    def testMacOS_PreInstallScriptHasCorrectContent(self):
        self.VerifyPreInstallScriptContent(
            '#!/bin/sh\n\n\n#\n# Main section\n#\n',
            'MacOS')

    def testAIX_PostInstallScriptHasCorrectContent(self):
        self.VerifyPostInstallScriptContent(
            '#!/bin/sh\n\nwrite_install_info() {\n  date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt\n  echo 1.2.3-4 >> /etc/opt/microsoft/scx/conf/installinfo.txt\n  return 0\n}\n\ngenerate_certificate() {\n  if [ ! "/etc/opt/microsoft/scx/ssl" = "" ] && [ -d /etc/opt/microsoft/scx/ssl ]; then\n   LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/ssl/lib\n   export LD_LIBRARY_PATH\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx-key.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem /etc/opt/microsoft/scx/ssl/scx-key.pem\n    fi\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem\n      ln -s -f /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem /etc/opt/microsoft/scx/ssl/scx.pem\n    fi\n    /opt/microsoft/scx/bin/tools/scxsslconfig\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n  else\n    # /etc/opt/microsoft/scx/ssl : directory does not exist\n    exit 1\n  fi\n  return 0\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth    required        /usr/lib/security/pam_aix\nscx    account required        /usr/lib/security/pam_aix"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nconfigure_pam_file() {\n  #\n  # First check if scx is already configured in pam.conf\n  #\n  grep -s "^[# ]*scx" /etc/pam.conf > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_file \n  \n  #\n  # Write the final configuration to pam.conf\n  #\n  # copy file first and modify this copy, so in case of low disk space we preserve the original file\n  cp /etc/pam.conf /etc/pam.conf.scx-copy && echo "# The configuration of scx is generated by the scx installer.\n$scx_conf\n# End of section generated by the scx installer.\n" >> /etc/pam.conf.scx-copy\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # verify that complete file was written \n  grep "# End of section generated by the scx installer." /etc/pam.conf.scx-copy > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # use move to substitute original file with verified copy\n  mv /etc/pam.conf.scx-copy /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth    required        /usr/lib/security/pam_aix\naccount required        /usr/lib/security/pam_aix"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nconfigure_pam_dir() {\n  #\n  # First check if scx is already configured\n  #\n  if [ -f /etc/pam.d/scx ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_dir \n  echo "#%PAM-1.0\n# The configuration of scx is generated by the scx installer.\n$scx_conf" > /etc/pam.d/scx\n  if [ $? -ne 0 ]; then\n    echo "can\'t create /etc/pam.d/scx"\n    return 1\n  fi\n}\n\nconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    configure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    configure_pam_dir \n  else\n    # No pam configuration.\n    echo "PAM does not seem to be configured."\n    echo "Checked both /etc/pam.conf and /etc/pam.d."\n    return 1\n  fi\n  return 0\n}\n\nconfigure_runas() {\n  if [ -s /etc/opt/microsoft/scx/conf/scxrunas.conf ]; then\n    # File is not zero size\n    return 0\n  fi\n  /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1\n}\n\nconfigure_pegasus_service() {\n  mkssys -s scx-cimd -p /opt/microsoft/scx/bin/scxcimserver -u root -S -n 15 -f 9 -G scx\n  grep scx-cimd /etc/inittab > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n  rmitab scx-cimd\n  fi\n  mkitab "scx-cimd:2:once:/usr/bin/startsrc -s scx-cimd > /dev/console 2>&1"\n}\n\nstart_pegasus_service() {\n  startsrc -s scx-cimd\n}\n\nregister_ext_providers() {\n  sleep 1\n  for F in `/bin/ls /opt/microsoft/scx/lib/providers/ext/*.mof 2> /dev/null`; do\n    /opt/microsoft/scx/bin/tools/scxcimmof -n "root/PG_InterOp" "$F"\n  done\n}\n\n\n#\n# Main section\n#\nwrite_install_info \ngenerate_certificate \nconfigure_pam \nconfigure_runas \nconfigure_pegasus_service \nstart_pegasus_service \nregister_ext_providers \n',
            'AIX')

    def testHPUX_PostInstallScriptHasCorrectContent(self):
        self.VerifyPostInstallScriptContent(
            '#!/usr/bin/sh\n\nwrite_install_info() {\n  date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt\n  echo 1.2.3-4 >> /etc/opt/microsoft/scx/conf/installinfo.txt\n  return 0\n}\n\ngenerate_certificate() {\n  if [ ! "/etc/opt/microsoft/scx/ssl" = "" ] && [ -d /etc/opt/microsoft/scx/ssl ]; then\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx-key.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem /etc/opt/microsoft/scx/ssl/scx-key.pem\n    fi\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem\n      ln -s -f /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem /etc/opt/microsoft/scx/ssl/scx.pem\n    fi\n    /opt/microsoft/scx/bin/tools/scxsslconfig\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n  else\n    # /etc/opt/microsoft/scx/ssl : directory does not exist\n    exit 1\n  fi\n  return 0\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth required  libpam_hpsec.so.1\nscx    auth required  libpam_unix.so.1\nscx    account required       libpam_hpsec.so.1\nscx    account required       libpam_unix.so.1"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nconfigure_pam_file() {\n  #\n  # First check if scx is already configured in pam.conf\n  #\n  grep -s "^[# ]*scx" /etc/pam.conf > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_file \n  \n  #\n  # Write the final configuration to pam.conf\n  #\n  # copy file first and modify this copy, so in case of low disk space we preserve the original file\n  cp /etc/pam.conf /etc/pam.conf.scx-copy && echo "# The configuration of scx is generated by the scx installer.\n$scx_conf\n# End of section generated by the scx installer.\n" >> /etc/pam.conf.scx-copy\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # verify that complete file was written \n  grep "# End of section generated by the scx installer." /etc/pam.conf.scx-copy > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # use move to substitute original file with verified copy\n  mv /etc/pam.conf.scx-copy /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth required  libpam_hpsec.so.1\nauth required  libpam_unix.so.1\naccount required       libpam_hpsec.so.1\naccount required       libpam_unix.so.1"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nconfigure_pam_dir() {\n  #\n  # First check if scx is already configured\n  #\n  if [ -f /etc/pam.d/scx ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_dir \n  echo "#%PAM-1.0\n# The configuration of scx is generated by the scx installer.\n$scx_conf" > /etc/pam.d/scx\n  if [ $? -ne 0 ]; then\n    echo "can\'t create /etc/pam.d/scx"\n    return 1\n  fi\n}\n\nconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    configure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    configure_pam_dir \n  else\n    # No pam configuration.\n    echo "PAM does not seem to be configured."\n    echo "Checked both /etc/pam.conf and /etc/pam.d."\n    return 1\n  fi\n  return 0\n}\n\nconfigure_runas() {\n  if [ -s /etc/opt/microsoft/scx/conf/scxrunas.conf ]; then\n    # File is not zero size\n    return 0\n  fi\n  /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1\n}\n\nconfigure_pegasus_service() {\n  return 0\n}\n\nstart_pegasus_service() {\n  /sbin/init.d/scx-cimd start\n}\n\nregister_ext_providers() {\n  sleep 1\n  for F in `/bin/ls /opt/microsoft/scx/lib/providers/ext/*.mof 2> /dev/null`; do\n    /opt/microsoft/scx/bin/tools/scxcimmof -n "root/PG_InterOp" "$F"\n  done\n}\n\n\n#\n# Main section\n#\nwrite_install_info \ngenerate_certificate \nconfigure_pam \nconfigure_runas \nconfigure_pegasus_service \nstart_pegasus_service \nregister_ext_providers \n',
            'HPUX', '', 11, 30)

    def testSunOS_PostInstallScriptHasCorrectContent(self):
        self.VerifyPostInstallScriptContent(
            '#!/usr/bin/sh\n\nCreateLink_usr_sbin_scxadmin() {\n  ln -s /opt/microsoft/scx/bin/tools/scxadmin /usr/sbin/scxadmin > /dev/null 2>&1\n}\n\nwrite_install_info() {\n  date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt\n  echo 1.2.3-4 >> /etc/opt/microsoft/scx/conf/installinfo.txt\n  return 0\n}\n\ngenerate_certificate() {\n  if [ ! "/etc/opt/microsoft/scx/ssl" = "" ] && [ -d /etc/opt/microsoft/scx/ssl ]; then\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx-key.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem /etc/opt/microsoft/scx/ssl/scx-key.pem\n    fi\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem\n      ln -s -f /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem /etc/opt/microsoft/scx/ssl/scx.pem\n    fi\n    /opt/microsoft/scx/bin/tools/scxsslconfig\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n  else\n    # /etc/opt/microsoft/scx/ssl : directory does not exist\n    exit 1\n  fi\n  return 0\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth requisite          pam_authtok_get.so.1\nscx    auth required           pam_dhkeys.so.1\nscx    auth required           pam_unix_cred.so.1\nscx    auth required           pam_unix_auth.so.1\nscx    account requisite       pam_roles.so.1\nscx    account required        pam_unix_account.so.1"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nconfigure_pam_file() {\n  #\n  # First check if scx is already configured in pam.conf\n  #\n  grep -s "^[# ]*scx" /etc/pam.conf > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_file \n  \n  #\n  # Write the final configuration to pam.conf\n  #\n  # copy file first and modify this copy, so in case of low disk space we preserve the original file\n  cp /etc/pam.conf /etc/pam.conf.scx-copy && echo "# The configuration of scx is generated by the scx installer.\n$scx_conf\n# End of section generated by the scx installer.\n" >> /etc/pam.conf.scx-copy\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # verify that complete file was written \n  grep "# End of section generated by the scx installer." /etc/pam.conf.scx-copy > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # use move to substitute original file with verified copy\n  mv /etc/pam.conf.scx-copy /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth requisite          pam_authtok_get.so.1\nauth required           pam_dhkeys.so.1\nauth required           pam_unix_cred.so.1\nauth required           pam_unix_auth.so.1\naccount requisite       pam_roles.so.1\naccount required        pam_unix_account.so.1"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nconfigure_pam_dir() {\n  #\n  # First check if scx is already configured\n  #\n  if [ -f /etc/pam.d/scx ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_dir \n  echo "#%PAM-1.0\n# The configuration of scx is generated by the scx installer.\n$scx_conf" > /etc/pam.d/scx\n  if [ $? -ne 0 ]; then\n    echo "can\'t create /etc/pam.d/scx"\n    return 1\n  fi\n}\n\nconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    configure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    configure_pam_dir \n  else\n    # No pam configuration.\n    echo "PAM does not seem to be configured."\n    echo "Checked both /etc/pam.conf and /etc/pam.d."\n    return 1\n  fi\n  return 0\n}\n\nconfigure_runas() {\n  if [ -s /etc/opt/microsoft/scx/conf/scxrunas.conf ]; then\n    # File is not zero size\n    return 0\n  fi\n  /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1\n}\n\nconfigure_pegasus_service() {\n  svccfg import /var/svc/manifest/application/management/scx-cimd.xml\n}\n\nstart_pegasus_service() {\n  svcadm enable svc:/application/management/scx-cimd\n}\n\nregister_ext_providers() {\n  sleep 1\n  for F in `/bin/ls /opt/microsoft/scx/lib/providers/ext/*.mof 2> /dev/null`; do\n    /opt/microsoft/scx/bin/tools/scxcimmof -n "root/PG_InterOp" "$F"\n  done\n}\n\n\n#\n# Main section\n#\nCreateLink_usr_sbin_scxadmin \nwrite_install_info \ngenerate_certificate \nconfigure_pam \nconfigure_runas \nconfigure_pegasus_service \nstart_pegasus_service \nregister_ext_providers \n',
            'SunOS', '', 5, 10)

    def testSuSE_PostInstallScriptHasCorrectContent(self):
        self.VerifyPostInstallScriptContent(
            '#!/bin/sh\n\nwrite_install_info() {\n  date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt\n  echo 1.2.3-4 >> /etc/opt/microsoft/scx/conf/installinfo.txt\n  return 0\n}\n\ngenerate_certificate() {\n  if [ ! "/etc/opt/microsoft/scx/ssl" = "" ] && [ -d /etc/opt/microsoft/scx/ssl ]; then\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx-key.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem /etc/opt/microsoft/scx/ssl/scx-key.pem\n    fi\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem\n      ln -s -f /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem /etc/opt/microsoft/scx/ssl/scx.pem\n    fi\n    /opt/microsoft/scx/bin/tools/scxsslconfig\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n  else\n    # /etc/opt/microsoft/scx/ssl : directory does not exist\n    exit 1\n  fi\n  return 0\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth     include        common-auth\nscx    auth     required       pam_nologin.so\nscx    account  include        common-account"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nconfigure_pam_file() {\n  #\n  # First check if scx is already configured in pam.conf\n  #\n  grep -s "^[# ]*scx" /etc/pam.conf > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_file \n  \n  #\n  # Write the final configuration to pam.conf\n  #\n  # copy file first and modify this copy, so in case of low disk space we preserve the original file\n  cp /etc/pam.conf /etc/pam.conf.scx-copy && echo "# The configuration of scx is generated by the scx installer.\n$scx_conf\n# End of section generated by the scx installer.\n" >> /etc/pam.conf.scx-copy\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # verify that complete file was written \n  grep "# End of section generated by the scx installer." /etc/pam.conf.scx-copy > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # use move to substitute original file with verified copy\n  mv /etc/pam.conf.scx-copy /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth     include        common-auth\nauth     required       pam_nologin.so\naccount  include        common-account"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nconfigure_pam_dir() {\n  #\n  # First check if scx is already configured\n  #\n  if [ -f /etc/pam.d/scx ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_dir \n  echo "#%PAM-1.0\n# The configuration of scx is generated by the scx installer.\n$scx_conf" > /etc/pam.d/scx\n  if [ $? -ne 0 ]; then\n    echo "can\'t create /etc/pam.d/scx"\n    return 1\n  fi\n}\n\nconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    configure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    configure_pam_dir \n  else\n    # No pam configuration.\n    echo "PAM does not seem to be configured."\n    echo "Checked both /etc/pam.conf and /etc/pam.d."\n    return 1\n  fi\n  return 0\n}\n\nconfigure_runas() {\n  if [ -s /etc/opt/microsoft/scx/conf/scxrunas.conf ]; then\n    # File is not zero size\n    return 0\n  fi\n  /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1\n}\n\nconfigure_pegasus_service() {\n  /usr/lib/lsb/install_initd /etc/init.d/scx-cimd\n}\n\nstart_pegasus_service() {\n  service scx-cimd start\n}\n\nregister_ext_providers() {\n  sleep 1\n  for F in `/bin/ls /opt/microsoft/scx/lib/providers/ext/*.mof 2> /dev/null`; do\n    /opt/microsoft/scx/bin/tools/scxcimmof -n "root/PG_InterOp" "$F"\n  done\n}\n\n\n#\n# Main section\n#\nwrite_install_info \ngenerate_certificate \nconfigure_pam \nconfigure_runas \nconfigure_pegasus_service \nstart_pegasus_service \nregister_ext_providers \n',
            'Linux', 'SUSE', 10, 2)

    def testUbuntu_PostInstallScriptHasCorrectContent(self):
        self.VerifyPostInstallScriptContent(
            '#!/bin/sh\n\nwrite_install_info() {\n  date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt\n  echo 1.2.3-4 >> /etc/opt/microsoft/scx/conf/installinfo.txt\n  return 0\n}\n\ngenerate_certificate() {\n  if [ ! "/etc/opt/microsoft/scx/ssl" = "" ] && [ -d /etc/opt/microsoft/scx/ssl ]; then\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx-key.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem /etc/opt/microsoft/scx/ssl/scx-key.pem\n    fi\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem\n      ln -s -f /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem /etc/opt/microsoft/scx/ssl/scx.pem\n    fi\n    /opt/microsoft/scx/bin/tools/scxsslconfig\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n  else\n    # /etc/opt/microsoft/scx/ssl : directory does not exist\n    exit 1\n  fi\n  return 0\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth     required       pam_env.so\nscx    auth     required       pam_unix.so nullok_secure\nscx    account  required       pam_unix.so\nscx    session  required       pam_limits.so"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nconfigure_pam_file() {\n  #\n  # First check if scx is already configured in pam.conf\n  #\n  grep -s "^[# ]*scx" /etc/pam.conf > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_file \n  \n  #\n  # Write the final configuration to pam.conf\n  #\n  # copy file first and modify this copy, so in case of low disk space we preserve the original file\n  cp /etc/pam.conf /etc/pam.conf.scx-copy && echo "# The configuration of scx is generated by the scx installer.\n$scx_conf\n# End of section generated by the scx installer.\n" >> /etc/pam.conf.scx-copy\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # verify that complete file was written \n  grep "# End of section generated by the scx installer." /etc/pam.conf.scx-copy > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # use move to substitute original file with verified copy\n  mv /etc/pam.conf.scx-copy /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth     required       pam_env.so\nauth     required       pam_unix.so nullok_secure\naccount  required       pam_unix.so\nsession  required       pam_limits.so"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nconfigure_pam_dir() {\n  #\n  # First check if scx is already configured\n  #\n  if [ -f /etc/pam.d/scx ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_dir \n  echo "#%PAM-1.0\n# The configuration of scx is generated by the scx installer.\n$scx_conf" > /etc/pam.d/scx\n  if [ $? -ne 0 ]; then\n    echo "can\'t create /etc/pam.d/scx"\n    return 1\n  fi\n}\n\nconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    configure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    configure_pam_dir \n  else\n    # No pam configuration.\n    echo "PAM does not seem to be configured."\n    echo "Checked both /etc/pam.conf and /etc/pam.d."\n    return 1\n  fi\n  return 0\n}\n\nconfigure_runas() {\n  if [ -s /etc/opt/microsoft/scx/conf/scxrunas.conf ]; then\n    # File is not zero size\n    return 0\n  fi\n  /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1\n}\n\nconfigure_pegasus_service() {\n  update-rc.d scx-cimd defaults\n}\n\nstart_pegasus_service() {\n  invoke-rc.d scx-cimd start\n}\n\nregister_ext_providers() {\n  sleep 1\n  for F in `/bin/ls /opt/microsoft/scx/lib/providers/ext/*.mof 2> /dev/null`; do\n    /opt/microsoft/scx/bin/tools/scxcimmof -n "root/PG_InterOp" "$F"\n  done\n}\n\n\n#\n# Main section\n#\nwrite_install_info \ngenerate_certificate \nconfigure_pam \nconfigure_runas \nconfigure_pegasus_service \nstart_pegasus_service \nregister_ext_providers \n',
            'Linux', 'UBUNTU', 8, 4)

    def testMacOS_PostInstallScriptHasCorrectContent(self):
        self.VerifyPostInstallScriptContent(
            '#!/bin/sh\n\nwrite_install_info() {\n  date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt\n  echo 1.2.3-4 >> /etc/opt/microsoft/scx/conf/installinfo.txt\n  return 0\n}\n\ngenerate_certificate() {\n  if [ ! "/etc/opt/microsoft/scx/ssl" = "" ] && [ -d /etc/opt/microsoft/scx/ssl ]; then\n   LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/ssl/lib\n   export LD_LIBRARY_PATH\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx-key.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1-key.pem /etc/opt/microsoft/scx/ssl/scx-key.pem\n    fi\n    if [ -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem ] && [ ! -f /etc/opt/microsoft/scx/ssl/scx.pem ]; then\n      mv -f /etc/opt/microsoft/scx/ssl/scx-seclevel1.pem /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem\n      ln -s -f /etc/opt/microsoft/scx/ssl/scx-host-`hostname`.pem /etc/opt/microsoft/scx/ssl/scx.pem\n    fi\n    /usr/libexec/microsoft/scx/bin/tools/scxsslconfig\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n  else\n    # /etc/opt/microsoft/scx/ssl : directory does not exist\n    exit 1\n  fi\n  return 0\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth       required       pam_nologin.so\nscx    auth       sufficient     pam_securityserver.so\nscx    auth       sufficient     pam_unix.so\nscx    auth       required       pam_deny.so\nscx    account    required       pam_securityserver.so"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nconfigure_pam_file() {\n  #\n  # First check if scx is already configured in pam.conf\n  #\n  grep -s "^[# ]*scx" /etc/pam.conf > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_file \n  \n  #\n  # Write the final configuration to pam.conf\n  #\n  # copy file first and modify this copy, so in case of low disk space we preserve the original file\n  cp /etc/pam.conf /etc/pam.conf.scx-copy && echo "# The configuration of scx is generated by the scx installer.\n$scx_conf\n# End of section generated by the scx installer.\n" >> /etc/pam.conf.scx-copy\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # verify that complete file was written \n  grep "# End of section generated by the scx installer." /etc/pam.conf.scx-copy > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo "can\'t update file /etc/pam.conf.scx-copy"\n    rm -f /etc/pam.conf.scx-copy\n    return 1\n  fi\n  # use move to substitute original file with verified copy\n  mv /etc/pam.conf.scx-copy /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth       required       pam_nologin.so\nauth       sufficient     pam_securityserver.so\nauth       sufficient     pam_unix.so\nauth       required       pam_deny.so\naccount    required       pam_securityserver.so"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nconfigure_pam_dir() {\n  #\n  # First check if scx is already configured\n  #\n  if [ -f /etc/pam.d/scx ]; then\n    # Match found\n    # Looks like scx is already configured\n    echo "scx already configured"\n    return 0\n  fi\n  \n  get_new_pam_config_dir \n  echo "#%PAM-1.0\n# The configuration of scx is generated by the scx installer.\n$scx_conf" > /etc/pam.d/scx\n  if [ $? -ne 0 ]; then\n    echo "can\'t create /etc/pam.d/scx"\n    return 1\n  fi\n}\n\nconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    configure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    configure_pam_dir \n  else\n    # No pam configuration.\n    echo "PAM does not seem to be configured."\n    echo "Checked both /etc/pam.conf and /etc/pam.d."\n    return 1\n  fi\n  return 0\n}\n\nconfigure_runas() {\n  if [ -s /etc/opt/microsoft/scx/conf/scxrunas.conf ]; then\n    # File is not zero size\n    return 0\n  fi\n  /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1\n}\n\nconfigure_pegasus_service() {\n  return 0\n}\n\nstart_pegasus_service() {\n  launchctl load -w /Library/LaunchDaemons/com.microsoft.scx-cimd.plist\n}\n\nregister_ext_providers() {\n  sleep 1\n  for F in `/bin/ls /usr/libexec/microsoft/scx/lib/providers/ext/*.mof 2> /dev/null`; do\n    /usr/libexec/microsoft/scx/bin/tools/scxcimmof -n "root/PG_InterOp" "$F"\n  done\n}\n\n\n#\n# Main section\n#\nwrite_install_info \ngenerate_certificate \nconfigure_pam \nconfigure_runas \nconfigure_pegasus_service \nstart_pegasus_service \nregister_ext_providers \n',
            'MacOS')

    def testAIX_PreUpgradeScriptHasCorrectContent(self):
        self.VerifyPreUpgradeScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  stopsrc -c -s scx-cimd\n}\n\nunregister_pegasus_service() {\n  rmssys -s scx-cimd\n  rmitab scx-cimd\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \n',
            'AIX')

    def testHPUX_PreUpgradeScriptHasCorrectContent(self):
         self.VerifyPreUpgradeScriptContent(
             '#!/usr/bin/sh\n\nstop_pegasus_service() {\n  /sbin/init.d/scx-cimd stop\n}\n\nunregister_pegasus_service() {\n  return 0\n}\n\nremove_deleted_files() {\n  rm -f /opt/microsoft/scx/lib/libpegCLIClientLib.*\n  rm -f /opt/microsoft/scx/lib/libpegcql.*\n  rm -f /opt/microsoft/scx/bin/scxopenwsmand\n  rm -f /opt/microsoft/scx/lib/libwsman_server.*\n  rm -f /opt/microsoft/scx/lib/libwsman.*\n  rm -Rf /opt/microsoft/scx/lib/openwsman\n  rm -Rf /var/opt/microsoft/scx/lib/repository/root#scx/classes\n  rm -f /sbin/init.d/scx-wsmand\n  rm -f /sbin/rc2.d/S999scx-wsmand\n  rm -f /sbin/rc1.d/K100scx-wsmand\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \nremove_deleted_files \n',
             'HPUX')

    def testSuSE_PreUpgradeScriptHasCorrectContent(self):
        self.VerifyPreUpgradeScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  service scx-cimd stop\n}\n\nunregister_pegasus_service() {\n  /usr/lib/lsb/remove_initd /etc/init.d/scx-cimd\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \n',
             'Linux', 'SUSE', 10, 2)

    def testUbuntu_PreUpgradeScriptHasCorrectContent(self):
        self.VerifyPreUpgradeScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  invoke-rc.d scx-cimd stop\n}\n\nunregister_pegasus_service() {\n  update-rc.d -f scx-cimd remove\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \n',
            'Linux', 'UBUNTU')

    def testMacOS_PreUpgradeScriptHasCorrectContent(self):
        self.VerifyPreUpgradeScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  launchctl unload -w /Library/LaunchDaemons/com.microsoft.scx-cimd.plist\n}\n\nunregister_pegasus_service() {\n  return 0\n}\n\n\n#\n# Main section\n#\n# Uninstall/unconfigure services\necho "Uninstalling/unconfigurating services ..."\nstop_pegasus_service \nunregister_pegasus_service \n',
            'MacOS')

    def testAIX_PreRemoveScriptHasCorrectContent(self):
        self.VerifyPreRemoveScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  stopsrc -c -s scx-cimd\n}\n\nunregister_pegasus_service() {\n  rmssys -s scx-cimd\n  rmitab scx-cimd\n}\n\nunconfigure_pam_file() {\n  # Configured with single file\n  \n  #\n  # Get all lines except scx configuration\n  #\n  pam_configuration=`grep -v "^[#\t]*scx" /etc/pam.conf | grep -v "# The configuration of scx is generated by the scx installer." | grep -v "# End of section generated by the scx installer."`\n  if [ $? -ne 0 ]; then\n    # scx not configured in PAM\n    return 0\n  fi\n  #\n  # Write it back (to the copy first)\n  #\n  cp -p /etc/pam.conf /etc/pam.conf.tmp\n  echo "$pam_configuration" > /etc/pam.conf.tmp\n  if [ $? -ne 0 ]; then\n    echo "can\'t write to /etc/pam.conf.tmp"\n    return 1\n  fi\n  mv /etc/pam.conf.tmp /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nunconfigure_pam_dir() {\n  # Configured with directory\n  if [ -f /etc/pam.d/scx ]; then\n    rm -f /etc/pam.d/scx\n    return 0\n  fi\n}\n\nunconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    unconfigure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    unconfigure_pam_dir \n  fi\n  return 0\n}\n\nremove_additional_files() {\n  rm -r /var/opt/microsoft/scx/tmp > /dev/null 2>&1\n  return 0\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \nunconfigure_pam \nremove_additional_files \n',
            'AIX')

    def testHPUX_PreRemoveScriptHasCorrectContent(self):
        self.VerifyPreRemoveScriptContent(
            '#!/usr/bin/sh\n\nstop_pegasus_service() {\n  /sbin/init.d/scx-cimd stop\n}\n\nunregister_pegasus_service() {\n  return 0\n}\n\nunconfigure_pam_file() {\n  # Configured with single file\n  \n  #\n  # Get all lines except scx configuration\n  #\n  pam_configuration=`grep -v "^[#\t]*scx" /etc/pam.conf | grep -v "# The configuration of scx is generated by the scx installer." | grep -v "# End of section generated by the scx installer."`\n  if [ $? -ne 0 ]; then\n    # scx not configured in PAM\n    return 0\n  fi\n  #\n  # Write it back (to the copy first)\n  #\n  cp -p /etc/pam.conf /etc/pam.conf.tmp\n  echo "$pam_configuration" > /etc/pam.conf.tmp\n  if [ $? -ne 0 ]; then\n    echo "can\'t write to /etc/pam.conf.tmp"\n    return 1\n  fi\n  mv /etc/pam.conf.tmp /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nunconfigure_pam_dir() {\n  # Configured with directory\n  if [ -f /etc/pam.d/scx ]; then\n    rm -f /etc/pam.d/scx\n    return 0\n  fi\n}\n\nunconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    unconfigure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    unconfigure_pam_dir \n  fi\n  return 0\n}\n\nremove_additional_files() {\n  rm -r /var/opt/microsoft/scx/tmp > /dev/null 2>&1\n  return 0\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \nunconfigure_pam \nremove_additional_files \n',
            'HPUX')

    def testSunOS_PreRemoveScriptHasCorrectContent(self):
        self.VerifyPreRemoveScriptContent(
            '#!/usr/bin/sh\n\nstop_pegasus_service() {\n  svcadm disable -s svc:/application/management/scx-cimd\n}\n\nunregister_pegasus_service() {\n  svccfg delete svc:/application/management/scx-cimd:default\n}\n\nget_new_pam_config_file() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "^[# ]*sshd[ ]+(auth|account)" /etc/pam.conf`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "scx    auth requisite          pam_authtok_get.so.1\nscx    auth required           pam_dhkeys.so.1\nscx    auth required           pam_unix_cred.so.1\nscx    auth required           pam_unix_auth.so.1\nscx    account requisite       pam_roles.so.1\nscx    account required        pam_unix_account.so.1"`\n  fi\n  \n  #\n  # Substitute sshd with scx.\n  #\n  scx_conf=`echo "$sshd_conf" | sed "s/sshd/scx/g"`\n  if [ $? -ne 0 ]; then\n    echo "can\'t parse /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_current_pam_config_file() {\n  scx_current_conf=`grep "^[#\t]*scx" /etc/pam.conf`\n}\n\nunconfigure_pam_file() {\n  # Configured with single file\n  \n  get_new_pam_config_file \n  get_current_pam_config_file \n  if [ "$scx_conf" != "$scx_current_conf" ]; then\n    # It looks like the configuration has been changed since\n    # installation or at least would change if we did a reinstall\n    # Safest to leave the configuration as is.\n    return 0\n  fi\n  #\n  # Get all lines except scx configuration\n  #\n  pam_configuration=`grep -v "^[#\t]*scx" /etc/pam.conf | grep -v "# The configuration of scx is generated by the scx installer." | grep -v "# End of section generated by the scx installer."`\n  if [ $? -ne 0 ]; then\n    # scx not configured in PAM\n    return 0\n  fi\n  #\n  # Write it back (to the copy first)\n  #\n  cp -p /etc/pam.conf /etc/pam.conf.tmp\n  echo "$pam_configuration" > /etc/pam.conf.tmp\n  if [ $? -ne 0 ]; then\n    echo "can\'t write to /etc/pam.conf.tmp"\n    return 1\n  fi\n  mv /etc/pam.conf.tmp /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nget_new_pam_config_dir() {\n  #\n  # Get configuration for sshd, service modules types auth and account\n  #\n  sshd_conf=`egrep "(auth|account)" /etc/pam.d/sshd 2> /dev/null`\n  if [ $? -ne 0 ]; then\n    # No match found\n    # sshd not explicitly configured.\n    # Use passwd\n    sshd_conf=`echo "auth requisite          pam_authtok_get.so.1\nauth required           pam_dhkeys.so.1\nauth required           pam_unix_cred.so.1\nauth required           pam_unix_auth.so.1\naccount requisite       pam_roles.so.1\naccount required        pam_unix_account.so.1"`\n  fi\n  \n  scx_conf=$sshd_conf\n}\n\nget_current_pam_config_dir() {\n  scx_current_conf=`cat /etc/pam.d/scx | grep -v "#%PAM-1.0" | grep -v "# The configuration of scx is generated by the scx installer."`\n}\n\nunconfigure_pam_dir() {\n  # Configured with directory\n  if [ -f /etc/pam.d/scx ]; then\n  get_new_pam_config_dir \n  get_current_pam_config_dir \n  if [ "$scx_conf" != "$scx_current_conf" ]; then\n    # It looks like the configuration has been changed since\n    # installation or at least would change if we did a reinstall\n    # Safest to leave the configuration as is.\n    return 0\n  fi\n    rm -f /etc/pam.d/scx\n    return 0\n  fi\n}\n\nunconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    unconfigure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    unconfigure_pam_dir \n  fi\n  return 0\n}\n\nremove_additional_files() {\n  rm -r /var/opt/microsoft/scx/tmp > /dev/null 2>&1\n  return 0\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \nunconfigure_pam \nremove_additional_files \n',
            'SunOS', '', 5, 10)

    def testSuSE_PreRemoveScriptHasCorrectContent(self):
        self.VerifyPreRemoveScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  service scx-cimd stop\n}\n\nunregister_pegasus_service() {\n  /usr/lib/lsb/remove_initd /etc/init.d/scx-cimd\n}\n\nunconfigure_pam_file() {\n  # Configured with single file\n  \n  #\n  # Get all lines except scx configuration\n  #\n  pam_configuration=`grep -v "^[#\t]*scx" /etc/pam.conf | grep -v "# The configuration of scx is generated by the scx installer." | grep -v "# End of section generated by the scx installer."`\n  if [ $? -ne 0 ]; then\n    # scx not configured in PAM\n    return 0\n  fi\n  #\n  # Write it back (to the copy first)\n  #\n  cp -p /etc/pam.conf /etc/pam.conf.tmp\n  echo "$pam_configuration" > /etc/pam.conf.tmp\n  if [ $? -ne 0 ]; then\n    echo "can\'t write to /etc/pam.conf.tmp"\n    return 1\n  fi\n  mv /etc/pam.conf.tmp /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nunconfigure_pam_dir() {\n  # Configured with directory\n  if [ -f /etc/pam.d/scx ]; then\n    rm -f /etc/pam.d/scx\n    return 0\n  fi\n}\n\nunconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    unconfigure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    unconfigure_pam_dir \n  fi\n  return 0\n}\n\nremove_additional_files() {\n  rm -r /var/opt/microsoft/scx/tmp > /dev/null 2>&1\n  return 0\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \nunconfigure_pam \nremove_additional_files \n',
            'Linux', 'SUSE', 10, 2)

    def testMacOS_PreRemoveScriptHasCorrectContent(self):
        self.VerifyPreRemoveScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  launchctl unload -w /Library/LaunchDaemons/com.microsoft.scx-cimd.plist\n}\n\nunregister_pegasus_service() {\n  return 0\n}\n\nunconfigure_pam_file() {\n  # Configured with single file\n  \n  #\n  # Get all lines except scx configuration\n  #\n  pam_configuration=`grep -v "^[#\t]*scx" /etc/pam.conf | grep -v "# The configuration of scx is generated by the scx installer." | grep -v "# End of section generated by the scx installer."`\n  if [ $? -ne 0 ]; then\n    # scx not configured in PAM\n    return 0\n  fi\n  #\n  # Write it back (to the copy first)\n  #\n  cp -p /etc/pam.conf /etc/pam.conf.tmp\n  echo "$pam_configuration" > /etc/pam.conf.tmp\n  if [ $? -ne 0 ]; then\n    echo "can\'t write to /etc/pam.conf.tmp"\n    return 1\n  fi\n  mv /etc/pam.conf.tmp /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nunconfigure_pam_dir() {\n  # Configured with directory\n  if [ -f /etc/pam.d/scx ]; then\n    rm -f /etc/pam.d/scx\n    return 0\n  fi\n}\n\nunconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    unconfigure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    unconfigure_pam_dir \n  fi\n  return 0\n}\n\nremove_additional_files() {\n  rm -r /var/opt/microsoft/scx/tmp > /dev/null 2>&1\n  return 0\n}\n\n\n#\n# Main section\n#\n# Uninstall/unconfigure services\necho "Uninstalling/unconfigurating services ..."\nstop_pegasus_service \nunregister_pegasus_service \nunconfigure_pam \nremove_additional_files \n',
            'MacOS')

    def testUbuntu_PreRemoveScriptHasCorrectContent(self):
        self.VerifyPreRemoveScriptContent(
            '#!/bin/sh\n\nstop_pegasus_service() {\n  invoke-rc.d scx-cimd stop\n}\n\nunregister_pegasus_service() {\n  update-rc.d -f scx-cimd remove\n}\n\nunconfigure_pam_file() {\n  # Configured with single file\n  \n  #\n  # Get all lines except scx configuration\n  #\n  pam_configuration=`grep -v "^[#\t]*scx" /etc/pam.conf | grep -v "# The configuration of scx is generated by the scx installer." | grep -v "# End of section generated by the scx installer."`\n  if [ $? -ne 0 ]; then\n    # scx not configured in PAM\n    return 0\n  fi\n  #\n  # Write it back (to the copy first)\n  #\n  cp -p /etc/pam.conf /etc/pam.conf.tmp\n  echo "$pam_configuration" > /etc/pam.conf.tmp\n  if [ $? -ne 0 ]; then\n    echo "can\'t write to /etc/pam.conf.tmp"\n    return 1\n  fi\n  mv /etc/pam.conf.tmp /etc/pam.conf\n  if [ $? -ne 0 ]; then\n    echo "can\'t replace /etc/pam.conf"\n    return 1\n  fi\n}\n\nunconfigure_pam_dir() {\n  # Configured with directory\n  if [ -f /etc/pam.d/scx ]; then\n    rm -f /etc/pam.d/scx\n    return 0\n  fi\n}\n\nunconfigure_pam() {\n  #\n  # Check if pam is configured with single\n  # configuration file or with configuration\n  # directory.\n  #\n  if [ -s /etc/pam.conf ]; then\n    unconfigure_pam_file \n  elif [ -d /etc/pam.d ]; then\n    unconfigure_pam_dir \n  fi\n  return 0\n}\n\nremove_additional_files() {\n  rm -r /var/opt/microsoft/scx/tmp > /dev/null 2>&1\n  return 0\n}\n\n\n#\n# Main section\n#\nstop_pegasus_service \nunregister_pegasus_service \nunconfigure_pam \nremove_additional_files \n',
            'Linux', 'UBUNTU')

    def testHPUX_PostRemoveScriptHasCorrectContent(self):
        self.VerifyPostRemoveScriptContent(
            '#!/usr/bin/sh\n\nremove_empty_directory_recursive() {\n  find $1 -type d | sort -r |\n  while read D\n  do\n    ls -l $D | grep -q \'total 0\' && rmdir  $D 2>/dev/null\n  done\n}\n\n\n#\n# Main section\n#\nremove_empty_directory_recursive /opt/microsoft\nremove_empty_directory_recursive /etc/opt/microsoft\nremove_empty_directory_recursive /var/opt/microsoft\n',
            'HPUX')

    def testSunOS_PostRemoveScriptHasCorrectContent(self):
        self.VerifyPostRemoveScriptContent(
            '#!/usr/bin/sh\n\nRemoveLink_usr_sbin_scxadmin() {\n  rm /usr/sbin/scxadmin > /dev/null 2>&1\n}\n\n\n#\n# Main section\n#\nRemoveLink_usr_sbin_scxadmin \n',
            'SunOS', '', 5, 10)
        self.VerifyPostRemoveScriptContent(
            '#!/usr/bin/sh\n\n\n#\n# Main section\n#\n',
            'SunOS', '', 5, 9)

    def testAIX_PreRequisitesAreCorrect(self):
        product = self.GivenAProduct(self.GivenAPlatform('AIX', '', 5, 3))
        
        expected = [
            'openssl.base 0.9.8.4',
            'xlC.rte 9.0.0.2',
            'xlC.aix50.rte 9.0.0.2',
            'bos.rte.libc 5.3.0.65'
            ]

        actual = product.GetPrerequisites()
        self.assertEqual(expected, actual)

    def testSun8_PreRequisitesAreCorrect(self):
        product = self.GivenAProduct(self.GivenAPlatform('SunOS', '', 5, 8))
        
        expected = [
            'SUNWcsl\tCore Solaris, (Shared Libs)',
            'SUNWlibC\tSun Workshop Compilers Bundled libC',
            'SUNWlibms\tSun WorkShop Bundled shared libm',
            'SMCossl\topenssl'
            ]

        actual = product.GetPrerequisites()
        self.assertEqual(expected, actual)
        
    def testSun9_PreRequisitesAreCorrect(self):
        product = self.GivenAProduct(self.GivenAPlatform('SunOS', '', 5, 9))
        
        expected = [
            'SUNWcsl\tCore Solaris, (Shared Libs)',
            'SUNWlibC\tSun Workshop Compilers Bundled libC',
            'SUNWlibms\tSun WorkShop Bundled shared libm',
            'SMCosslg\topenssl'
            ]

        actual = product.GetPrerequisites()
        self.assertEqual(expected, actual)

    def testSun10_PreRequisitesAreCorrect(self):
        product = self.GivenAProduct(self.GivenAPlatform('SunOS', '', 5, 10))
        
        expected = [
            'SUNWcsr\tCore Solaris, (Root)',
            'SUNWcslr\tCore Solaris Libraries (Root)',
            'SUNWcsl\tCore Solaris, (Shared Libs)',
            'SUNWlibmsr\tMath & Microtasking Libraries (Root)',
            'SUNWlibC\tSun Workshop Compilers Bundled libC',
            'SUNWopenssl-libraries\tOpenSSL Libraries (Usr)'
            ]

        actual = product.GetPrerequisites()
        self.assertEqual(expected, actual)

